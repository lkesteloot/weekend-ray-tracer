
package Scene;

// Shape of the thing.
enum Shape {
    SHAPE_SPHERE = 1;
    SHAPE_BOX = 2;
    SHAPE_XY_RECT = 3;
    SHAPE_XZ_RECT = 4;
    SHAPE_YZ_RECT = 5;
}

// A 3D vector.
message Vec3 {
    required float x = 1;
    required float y = 2;
    required float z = 3;
}

// A quaternion.
message Quat {
    // Vector.
    required float x = 1;
    required float y = 2;
    required float z = 3;

    // Real.
    required float w = 4;
}

// Camera position.
message Camera {
    optional Vec3 look_from = 1;
    optional Vec3 look_at = 2;
    optional float aperature = 3;
    optional float vertical_fov = 4;
}

// Type of texture.
enum TextureType {
    TEXTURE_CONSTANT = 1;
    TEXTURE_CHECKER = 2;
    TEXTURE_IMAGE = 3;
    TEXTURE_NOISE = 4;
    TEXTURE_TRANSFORM = 5;
}

// Texture.
message Texture {
    optional TextureType texture_type = 1;

    // For constant:
    optional Vec3 color = 2;

    // For checker:
    optional Texture odd = 3;
    optional Texture even = 4;
    optional float size = 5;

    // For image:
    optional string pathname = 6;

    // For noise:
    optional float scale = 7;

    // For transform:
    optional Texture sub_texture = 8;
    optional Vec3 translation = 9;
    optional Quat orientation = 10;
}

// Type of material.
enum MaterialType {
    MATERIAL_LAMBERTIAN = 1;
    MATERIAL_DIELECTRIC = 2;
    MATERIAL_METAL = 3;
    MATERIAL_DIFFUSE_LIGHT = 4;
    MATERIAL_ISOTROPIC = 5;
}

// Material.
message Material {
    optional MaterialType material_type = 1;

    // For diffuse light, isotropic, and lambertian.
    optional Texture texture = 2;

    // For dielectric.
    optional float refraction_index = 3;

    // For metal.
    optional Vec3 albedo = 4;
    optional float fuzz = 5;
}

// An object. We avoid the word "Object" because it's used in some languages.
message Thing {
    optional Shape shape = 1;
    optional Vec3 center = 2;
    optional Vec3 half_size = 3;
    optional Quat orientation = 4;
    optional Material material = 5;
}

// The entire world.
message World {
    // Black if missing.
    optional Vec3 background_color = 1;

    // If the camera is missing, the renderer can make its own.
    optional Camera camera = 2;
    repeated Thing thing = 3;
}

// Sequence of worlds, one per frame.
message Scene {
    repeated World world = 1;
}
